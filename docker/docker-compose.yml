version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:

services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ..:/app
    depends_on:
      - db
      - redis
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
    networks:
      - app-network

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=location_tracking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  celery_worker:
    image: location-tracking-web
    command: celery -A core worker -l INFO --without-gossip --without-mingle --without-heartbeat
    volumes:
      - ..:/app
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - web
    networks:
      - app-network

  celery_beat:
    image: location-tracking-web
    command: celery -A core beat -l INFO
    volumes:
      - ..:/app
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - web
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v2.37.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:8.5.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
